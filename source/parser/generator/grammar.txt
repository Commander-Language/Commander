//  ================
//  ||  Program:  ||
//  ================

(PRGM) -> (STMTS)

(STMT) -> [LCURLY] [RCURLY]
(STMT) -> [LCURLY] (STMTS) [RCURLY]


//  =================
//  ||  Bindings:  ||
//  =================

(BINDINGS) -> (BINDING)
(BINDINGS) -> (BINDINGS) [COMMA] (BINDING)

(BINDING) -> [CONST] [VARIABLE] [COLON] (TYPE)
(BINDING) -> [VARIABLE] [COLON] (TYPE)
(BINDING) -> [CONST] [VARIABLE]
(BINDING) -> [VARIABLE]


//  =================
//  ||  Commands:  ||
//  =================

(BASIC_CMD) -> [CMDSTRINGVAL]
(BASIC_CMD) -> [CMDVARIABLE]
(BASIC_CMD) -> (STRING)
LA: (BASIC_CMD) -> (BASIC_CMD) (BASIC_CMD)

LA: (PIPE_CMD) -> (PIPE_CMD) [PIPE] (BASIC_CMD)
LA: (PIPE_CMD) -> (BASIC_CMD) [PIPE] (BASIC_CMD)

(ASYNC_CMD) -> (PIPE_CMD) [AMPERSAND]
(ASYNC_CMD) -> (BASIC_CMD) [AMPERSAND]


//  ================
//  ||  Lvalues:  ||
//  ================

(LVALUE) -> [VARIABLE]
(LVALUE) -> (LVALUE) [LSQUARE] (EXPR) [RSQUARE]


//  ====================
//  ||  Expressions:  ||
//  ====================

(EXPR) -> [LPAREN] (EXPR) [RPAREN]

(EXPRS) -> (EXPR)
(EXPRS) -> (EXPRS) [COMMA] (EXPR)

(EXPR) -> (EXPR) [DOT] [VARIABLE] [LPAREN] [RPAREN]
(EXPR) -> (EXPR) [DOT] [VARIABLE] [LPAREN] (EXPRS) [RPAREN]

(EXPR) -> (EXPR) [LPAREN] [RPAREN]
(EXPR) -> (EXPR) [LPAREN] (EXPRS) [RPAREN]

(EXPR) -> [INTVAL]
(EXPR) -> [FLOATVAL]
(EXPR) -> [TRUE]
(EXPR) -> [FALSE]

(EXPR) -> (STRING)

(EXPR) -> [BACKTICK] (ASYNC_CMD) [BACKTICK]
(EXPR) -> [BACKTICK] (PIPE_CMD) [BACKTICK]
(EXPR) -> [BACKTICK] (BASIC_CMD) [BACKTICK]

(EXPR) -> (EXPR) [LSQUARE] (EXPR) [RSQUARE]

(EXPR) -> (LVALUE) [INCREMENT]
(EXPR) -> (LVALUE) [DECREMENT]
(EXPR) -> [INCREMENT] (LVALUE)
(EXPR) -> [DECREMENT] (LVALUE)

(EXPR) -> [NOT] (EXPR)
(EXPR) -> [MINUS] (EXPR)

RA: (EXPR) -> (EXPR) [EXPONENTIATE] (EXPR)

LA: (EXPR) -> (EXPR) [MULTIPLY] (EXPR)
LA: (EXPR) -> (EXPR) [DIVIDE] (EXPR)
LA: (EXPR) -> (EXPR) [MODULO] (EXPR)

LA: (EXPR) -> (EXPR) [ADD] (EXPR)
LA: (EXPR) -> (EXPR) [MINUS] (EXPR)

LA: (EXPR) -> (EXPR) [LESSER] (EXPR)
LA: (EXPR) -> (EXPR) [LESSER_EQUAL] (EXPR)
LA: (EXPR) -> (EXPR) [GREATER] (EXPR)
LA: (EXPR) -> (EXPR) [GREATER_EQUAL] (EXPR)

LA: (EXPR) -> (EXPR) [DOUBLE_EQUALS] (EXPR)
LA: (EXPR) -> (EXPR) [NOT_EQUALS] (EXPR)

LA: (EXPR) -> (EXPR) [AND] (EXPR)
LA: (EXPR) -> (EXPR) [OR] (EXPR)

(EXPR) -> [SCAN] (EXPR)
(EXPR) -> [SCAN] [LPAREN] (EXPR) [RPAREN]
(EXPR) -> [READ] (EXPR)
(EXPR) -> [READ] [LPAREN] (EXPR) [RPAREN]

(EXPR) -> [LSQUARE] [RSQUARE]
(EXPR) -> [LSQUARE] (EXPRS) [RSQUARE]
(EXPR) -> [LSQUARE] (EXPRS) [COMMA] [RSQUARE]

(EXPR) -> [LPAREN] [RPAREN]
(EXPR) -> [LPAREN] (EXPRS) [RPAREN]
(EXPR) -> [LPAREN] (EXPRS) [COMMA] [RPAREN]

LA: (EXPR) -> (LVALUE) [EXPONENTIATE_EQUALS] (EXPR)
LA: (EXPR) -> (LVALUE) [MULTIPLY_EQUALS] (EXPR)
LA: (EXPR) -> (LVALUE) [DIVIDE_EQUALS] (EXPR)
LA: (EXPR) -> (LVALUE) [MODULO_EQUALS] (EXPR)
LA: (EXPR) -> (LVALUE) [ADD_EQUALS] (EXPR)
LA: (EXPR) -> (LVALUE) [MINUS_EQUALS] (EXPR)
LA: (EXPR) -> (LVALUE) [EQUALS] (EXPR)    //  Set
LA: (EXPR) -> (BINDING) [EQUALS] (EXPR)   //  Declaration

(EXPR) -> (LVALUE)

(EXPR) -> [IF] (EXPR) [THEN] (EXPR) [ELSE] (EXPR)


//  ==================
//  ||  Functions:  ||
//  ==================

(STMT) -> [FN] [VARIABLE] [LPAREN] [RPAREN] (STMT)
(STMT) -> [FN] [VARIABLE] [LPAREN] (BINDINGS) [RPAREN] (STMT)
(STMT) -> [FN] [VARIABLE] [LPAREN] [RPAREN] [COLON] (TYPE) (STMT)
(STMT) -> [FN] [VARIABLE] [LPAREN] (BINDINGS) [RPAREN] [COLON] (TYPE) (STMT)

(EXPR) -> [FN] [LPAREN] [RPAREN] [LAMBDA] (EXPR)
(EXPR) -> [FN] [LPAREN] (BINDINGS) [RPAREN] [LAMBDA] (EXPR)
(EXPR) -> [FN] [LPAREN] [RPAREN] [COLON] (TYPE) [LAMBDA] (EXPR)
(EXPR) -> [FN] [LPAREN] (BINDINGS) [RPAREN] [COLON] (TYPE) [LAMBDA] (EXPR)

(EXPR) -> [FN] [LPAREN] [RPAREN] [LAMBDA] (STMT)
(EXPR) -> [FN] [LPAREN] (BINDINGS) [RPAREN] [LAMBDA] (STMT)
(EXPR) -> [FN] [LPAREN] [RPAREN] [COLON] (TYPE) [LAMBDA] (STMT)
(EXPR) -> [FN] [LPAREN] (BINDINGS) [RPAREN] [COLON] (TYPE) [LAMBDA] (STMT)


//  ===================
//  ||  Statements:  ||
//  ===================

(STMTS) -> (STMT)
(STMTS) -> (STMTS) (STMT)

(STMT) -> [TIMEOUT] [INTVAL] (STRING) (STMT)
(STMT) -> [TIMEOUT] [INTVAL] (STMT)
(STMT) -> [IMPORT] (STRING) [SEMICOLON]
(STMT) -> [ASSERT] (EXPR) [COMMA] (STRING) [SEMICOLON]
(STMT) -> [ASSERT] (EXPR) [SEMICOLON]

(STMT) -> [RETURN] (EXPR) [SEMICOLON]

(STMT) -> [PRINT] (EXPR) [SEMICOLON]
(STMT) -> [PRINT] [LPAREN] (EXPR) [RPAREN] [SEMICOLON]
(STMT) -> [PRINTLN] (EXPR) [SEMICOLON]
(STMT) -> [PRINTLN] [LPAREN] (EXPR) [RPAREN] [SEMICOLON]

(STMT) -> [WRITE] (EXPR) [TO] (EXPR) [SEMICOLON]
(STMT) -> [WRITE] [LPAREN] (EXPR) [COMMA] (EXPR) [RPAREN] [SEMICOLON]

(STMT) -> [ALIAS] [VARIABLE] [EQUALS] (BASIC_CMD) [SEMICOLON]

(STMT) -> [TYPE] [VARIABLE] [EQUALS] (TYPE) [SEMICOLON]

LA: (STMT) -> [IF] [LPAREN] (EXPR) [RPAREN] (STMT) [ELSE] (STMT)
(STMT) -> [IF] [LPAREN] (EXPR) [RPAREN] (STMT)

(STMT) -> [FOR] [LPAREN] [SEMICOLON] [SEMICOLON] [RPAREN] (STMT)
(STMT) -> [FOR] [LPAREN] (EXPR) [SEMICOLON] [SEMICOLON] [RPAREN] (STMT)
(STMT) -> [FOR] [LPAREN] [SEMICOLON] (EXPR) [SEMICOLON] [RPAREN] (STMT)
(STMT) -> [FOR] [LPAREN] [SEMICOLON] [SEMICOLON] (EXPR) [RPAREN] (STMT)
(STMT) -> [FOR] [LPAREN] [SEMICOLON] (EXPR) [SEMICOLON] (EXPR) [RPAREN] (STMT)
(STMT) -> [FOR] [LPAREN] (EXPR) [SEMICOLON] [SEMICOLON] (EXPR) [RPAREN] (STMT)
(STMT) -> [FOR] [LPAREN] (EXPR) [SEMICOLON] (EXPR) [SEMICOLON] [RPAREN] (STMT)
(STMT) -> [FOR] [LPAREN] (EXPR) [SEMICOLON] (EXPR) [SEMICOLON] (EXPR) [RPAREN] (STMT)
(STMT) -> [WHILE] [LPAREN] (EXPR) [RPAREN] (STMT)
(STMT) -> [DO] (STMT) [WHILE] [LPAREN] (EXPR) [RPAREN] [SEMICOLON]

(STMT) -> [BREAK] [SEMICOLON]
(STMT) -> [CONTINUE] [SEMICOLON]

(STMT) -> (ASYNC_CMD) [SEMICOLON]
(STMT) -> (PIPE_CMD) [SEMICOLON]
(STMT) -> (BASIC_CMD) [SEMICOLON]
(STMT) -> (EXPR) [SEMICOLON]


//  ================
//  ||  Strings:  ||
//  ================

(STRINGEXPRS) -> [STRINGLITERAL]
(STRINGEXPRS) -> (STRINGEXPRS) (EXPR) [STRINGLITERAL]
(STRING) -> [STRINGVAL] (STRINGEXPRS) [ENDSTRINGVAL]

//  ==============
//  ||  Types:  ||
//  ==============

(TYPE) -> [LPAREN] (TYPE) [RPAREN]

(TYPES) -> (TYPE)
(TYPES) -> (TYPES) [COMMA] (TYPE)

(TYPE) -> [INT]
(TYPE) -> [FLOAT]
(TYPE) -> [BOOL]
(TYPE) -> [STRING]
(TYPE) -> [VOID]
(TYPE) -> [VARIABLE]

LA: (TYPE) -> [LPAREN] [RPAREN] [LAMBDA] (TYPE)
LA: (TYPE) -> [LPAREN] (TYPES) [RPAREN] [LAMBDA] (TYPE)

(TYPE) -> (TYPE) [LSQUARE] [RSQUARE]

(TYPE) -> [LPAREN] [RPAREN]
(TYPE) -> [LPAREN] (TYPES) [RPAREN]
(TYPE) -> [LPAREN] (TYPES) [COMMA] [RPAREN]
